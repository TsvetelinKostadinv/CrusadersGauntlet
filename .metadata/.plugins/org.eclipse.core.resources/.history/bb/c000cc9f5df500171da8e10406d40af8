package com.crusaders.gauntlet.java.mouseMovement;

import java.awt.AWTException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;

import org.eclipse.xtext.xbase.lib.Pair;

import com.crusaders.gauntlet.java.models.Direction;

public class RobotMouseInteracter implements MouseInteracter{
	
	/* REMEMBER!!!!!
	 * X++ is there
	 * ---------------\
	 * 				    \
	 * 					  >
	 * 		 			/
	 * ---------------/
	 * 
	 * */
	
	/* REMEMBER!!!!!
	 * Y++ is there
	 * |    |
	 * |    |
	 * |    |
	 * |    |
	 *  \  /
	 * 	 \/
	 * */
	
	
	
	public final int maxSpeed = 50;
	public final int maxInputSpeed = 100;
	public final int stepsForMaxSpeed = 50;
	public final int increment = maxSpeed/stepsForMaxSpeed;
	
	private Robot robo;
	private int mouseX, mouseY;
	
	public RobotMouseInteracter() 
	{
		initDependencies();
	}

	private void initDependencies() 
	{
		Point loc = MouseInfo.getPointerInfo().getLocation();
		mouseX = (int) loc.getX();
		mouseY = (int) loc.getY();
		loc=null;
		try {
			robo = new Robot();
		} catch (AWTException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void moveMouse(Direction direction, int time)//the time is temporary 
	{
		
		Pair<Integer, Integer> speeds = accelerateToMaxSpeed(direction);
//		for(int i=0;i<time;i++)
//		{
//			updateMouseCoord();
//			robo.mouseMove(mouseX+direction.getAccX(), mouseY+direction.getAccY());
//			System.out.println("Mouse coord: ");
//			System.out.println(mouseX+", "+mouseY);
//			try {
//				Thread.sleep(100);
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
		
	}

	private Pair<Integer, Integer> accelerateToMaxSpeed(Direction direction) 
	{
		/*
		 * the speedX is the key;
		 * the speedY is the value;
		 */
		
		Pair<Integer, Integer> speeds = new Pair<Integer, Integer>(1,1);
		int maxSpeedX = (direction.getAccX()*maxSpeed)/maxInputSpeed;
		int maxSpeedY = (direction.getAccY()*maxSpeed)/maxInputSpeed;

		do{
			System.out.println("acc: "+speeds.getKey()+", "+speeds.getValue());
			mouseX = mouseX+speeds.getKey();
			mouseY = mouseY+speeds.getValue();
			robo.mouseMove(mouseX, mouseY);
			System.out.println("Moved the mouse!");
			speeds = increaseSpeeds(speeds.getKey(), speeds.getValue(), direction);
			//System.out.println("acc: "+speedX+", "+speedY);
			//System.out.println(maxSpeedX);
			//System.out.println(maxSpeedY);
		}while(checkMaxSpeedsReached(speeds, direction));
		//System.out.println(speedX<maxSpeedX && speedY<maxSpeedY);
		return speeds;
	}
	
	private boolean checkMaxSpeedsReached(Pair<Integer, Integer> speeds, Direction direction) {
		if(direction.getAccX()>=0)
		{
			if(speeds.getKey()>=maxSpeed)
			{
				return true;
			}
		}else{
			if(speeds.getKey()<=maxSpeed)
			{
				return true;
			}
		}
		
		if(direction.getAccY()>=0)
		{
			if(speeds.getValue()>=maxSpeed)
			{
				return true;
			}
		}else{
			if(speeds.getValue()<=maxSpeed)
			{
				return true;
			}
		}
	}

	private Pair<Integer, Integer> increaseSpeeds(int speedX, int speedY, Direction direction)
	{
		if(direction.getAccX()>=0) { speedX+=increment; } else { speedX-=increment; }
		if(direction.getAccY()>=0) { speedY+=increment; } else { speedY-=increment; }
		
		return new Pair<Integer, Integer>(speedX, speedY);
	}
	
	public static void main(String[] args)
	{
		RobotMouseInteracter i = new RobotMouseInteracter();
		i.moveMouse(new Direction(60, -30), 3);
	}
	
	private void updateMouseCoord()
	{
		Point loc = MouseInfo.getPointerInfo().getLocation();
		this.mouseX = (int) loc.getX();
		this.mouseY = (int) loc.getY();
		loc=null;
	}
}
